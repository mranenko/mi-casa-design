/*
  color helper functions
*/

@function contrast($color) {
  @if (lightness($color) > 40) {
    @return color(white);
  }
  @return color(black);
}

@function tint($color, $percentage) {
  @return mix(white, $color, $percentage);
}

@function shade($color, $percentage) {
  @return mix(black, $color, $percentage);
}


/*
  initial colors
*/

$color-cocoa: #423836;
$color-lime: #498300;


/*
  color by name
*/

$colors: (
  black: $color-cocoa,
  white: tint($color-cocoa, 99%),

  neutral: (
    1: tint($color-cocoa, 94%),
    2: tint($color-cocoa, 84%),
    3: tint($color-cocoa, 72%),
    4: tint($color-cocoa, 27%),
    5: $color-cocoa,
    6: shade($color-cocoa, 30%),
  ),

  primary: (
    1: tint($color-lime, 90%),
    2: tint($color-lime, 60%),
    3: $color-lime,
    4: shade($color-lime, 20%),
  ),
);


/*
  color accessor function
*/

@function color($keys...) {
  $value: $colors;

  @if length($keys) == 1 {
    @if nth($keys, 1) == neutral { @return color(neutral, 4); }
    @if nth($keys, 1) == primary { @return color(primary, 3); }
  }

  @each $key in $keys {
    $value: map-get($value, $key);
  }

  @return $value;
}


/*
  color by element property
*/

$colors: map-merge($colors, (
  border: color(neutral, 3),
));
